<?php
// $Id: wsuser.module 545 2009-09-20 00:15:26Z rfay $
/**
 * @file
 * Controls the multi-step registration setup
 */

/**
 * Implementation of hook_menu().
 * TODO: Add special permissions for full download
 */
function ms_form_menu() {
	global $user;
	$items = array();
		
		
		$items['ms-form'] = array(
			'title' => 'MS Form',
			'page callback' => 'ms_form',
			'page arguments' => array(1),
			'type' => MENU_CALLBACK,
			'access callback' => TRUE,// Switch back when module is ready'user_register_access',
		);

		$items['yall-are-welcome'] = array(
			'title' => 'Y\'all are indeed quite welcome',
			'page callback' => 'finish_stub',
			'type' => MENU_CALLBACK,
			'access callback' => TRUE,// Switch back when module is ready'user_register_access',
		);
		
		
	return $items;
}

function ms_form($step) {
  // Include CTools form wizard code and CTools object cache. 
  ctools_include('wizard');
  ctools_include('object-cache');
 
  // Wizard configuration. A complete set of parameters is best viewed in 
  // documentation. 
  $form_info = array(
  // Wizard’s identifier. 
    'id' => 'regObj',
    // Path to the pages of the wizard (the current step is a variable 
    // argument). Should be the same as the path defined in hook_menu(). 
    'path' => "ms-form/%step",
    // To show or not to show the progress
    'show trail' => TRUE,
    // Manage the visibility of additional navigation buttons. 
    'show back' => TRUE,
    'show cancel' => TRUE,
    'show return' => FALSE,
    // Button texts
    'next text' => t('Next'),
    // Special functions prompted by the wizard 
    // - when navigating the to the next step 
    'next callback' =>  'ms_form_reg_next',
    // - at the completion of the final step 
    'finish callback' => 'ms_form_finish',
    // Array that describes the identifiers and the names of steps 
    // and their order. 
   
    'order' => array(
  	  '1' => t('Welcome'),
      '2' => t('Account'),
      '3' => t('Personal Info'),
      '4' => t('Hosting Info'),
    ),
 
    // Array, where the parameters are set for each form (the form of each step) 
    // The form_id sets the form identifier, which is 
    // also the name of the form building function. 
    // The specified form_id are also used to determine the function name 
    // for the current step: 
    // - the function $form_id . '_validate' is used for validation, 
    // - $form_id . '_submit' is used for submission. 
    // Here you can define additional parameters, such as 
    // include files that contain the code for each step (for the full list 
    // of parameters, see documentation). 
    'forms' => array(
      '1' => array(
        'form id' => 'ms_form_welcome',
      ),
      '2' => array(
        'form id' => 'ms_form_account',
      ),
      '3' => array(
        'form id' => 'ms_form_personal',
      ),
      '4' => array(
        'form id' => 'ms_form_hosting',
      ),
    ),
  );
 
  // An example of working with cache: this is where the transfer of
  // information between the steps is carried out. Earl Miles recommends
  // writing wrapper functions around CTools cache objects - 
  // mymodule_cache_get() and mymodule_cache_set() functions.
  // In this example it’s assumed that we store data transferred 
  // between the steps within the $signup object. 
  $regObj = wsuser_multi_step_cache_get();
  if (!$regObj) {
    // Set step = 1 - we have no data from the cache. 
    //$step = current(array_keys($form_info['order']));
    $regObj = new stdClass();
    wsuser_multi_step_cache_set("regObj",$regObj);
  }
  // This way the data from the cache are available within each step within 
  // $form_state array. 
  $form_state['regObj'] = $regObj;
 
  // Generate the form output for the current step. 
$output = ctools_wizard_multistep_form($form_info, $step, $form_state);
 
  return $output;
}

function wsuser_multi_step_cache_get() {
  ctools_include('object-cache');
  $cache = ctools_object_cache_get('regObj', 'regObj');
  if (!$cache) {
    //$cache = delegator_page_load($name);
  //  $cache->locked = ctools_object_cache_test('ms_form', $name);
  }

  return $cache;
}

/**
 * Store changes to a task handler in the object cache.
 */
function wsuser_multi_step_cache_set($name, $page) {
  ctools_include('object-cache');
  $cache = ctools_object_cache_set('regObj', $name, $page);
}

/**
 * Remove an item from the object cache.
 */
function wsuser_multi_step_cache_clear($name) {
  ctools_include('object-cache');
  ctools_object_cache_clear('ms_form', $name);
}

function ms_form_welcome(&$form, &$form_state){
	$form['welcome'] = array('#type' => 'markup', '#value' => variable_get('user_registration_help'));
}

function ms_form_account(&$form, $form_state){
	$form2 = user_edit_form();
	$form['account'] = $form2['account'];
	$form['picture'] = $form2['picture'];
	
	//$wombat = &$form_state['wombat_obj'];
	//$form_state['no buttons'] = TRUE;  
}

function ms_form_account_submit(&$form, $form_state){
	$submitted = $form_state['values'];
 	$dont_save_keys = array('previous','op','next','cancel', 'form_build_id', 'form_token', 'form_id'); //not sure about picture... it was blank in testing
 	$values // YOU ARE HERE... SETUP ARRAY PROPERLy
 	foreach($save_values as $value) {
   		$form_state['regObj']->$value = $submitted[$value];
 	}
}

function ms_form_personal(&$form, &$form_state){
	$form2 = wsuser_form();
	$form['personal'] = $form2['wsuser']['personal'];
}
function ms_form_hosting(&$form, &$form_state){
	$form2 = wsuser_form();
	$form3 = _user_location_form();
	//$form3 = drupal_get_form('user_register');
	$form['hosting']['preferences'] = $form2['wsuser']['hosting']['preferences'];
	$form['hosting']['location'] =  $form3['wsuser']['hosting']['location'];
}

function ms_form_finish(&$form_state){
		drupal_set_message(t('THANK YOU FOR FINISHING THE FORM. IT\'S NOT DOING ANYTHING NOW, BUT IT WILL'));
	
	$form_state['redirect'] = 'yall-are-welcome';
}

function finish_stub(){
	return "You're welcome for allowing you to sign up for the site.  Now leave Kevin alone and go ride your bike.";
}

function ms_form_reg_next(&$form_state) {
	$regObj = &$form_state['regObj'];
  	// set wombat in cache... pretty simple
 	$cache = ctools_object_cache_set('regObj', 'regObj', $regObj);
}