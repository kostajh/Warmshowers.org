<?php

/**
 * @file
 * Notifies users about new Private Messages via Email.
 */

/**
 * Disable e-mail notifications.
 */
define('PM_EMAIL_NOTIFY_LEVEL_DISABLED', 0);

/**
 * Enable e-mail notifications only for new threads.
 */
define('PM_EMAIL_NOTIFY_LEVEL_THREAD', 4);

/**
 * Enable e-mail notifications only once until a user visits a threads.
 */
define('PM_EMAIL_NOTIFY_LEVEL_UNREAD_ONCE', 8);

/**
 * Enable e-mail notifications for all messages.
 */
define('PM_EMAIL_NOTIFY_LEVEL_ALL', 12);

/**
 * Enable e-mail notifications and use the global default.
 *
 * A negative value will be ignored by the settings API.
 */
define('PM_EMAIL_NOTIFY_LEVEL_DEFAULT', -1);

/**
 * Implements hook_perm().
 */
function ws_pm_email_notify_perm() {
  return array('set privatemsg e-mail notification level', 'change privatemsg e-mail notification for indirect messages');
}

/**
 * Implements hook_menu().
 */
function ws_pm_email_notify_menu() {
  $items['admin/settings/messages/notify'] = array(
    'title'            => 'E-mail notify',
    'description'      => 'E-mail notification settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('ws_pm_email_notify_admin_settings_form'),
    'file'             => 'ws_pm_email_notify.admin.inc',
    'access arguments' => array('administer privatemsg settings'),
    'type'             => MENU_LOCAL_TASK,
    'weight'           => 10,
  );
  return $items;
}

/**
 * Retrieve notification level of a user.
 *
 * This function retrieves user's pm notification level from database,
 * if user preference doesn't exist - it uses default value instead.
 *
 * @param $uid
 *   User ID.
 *
 * @return
 *   Returns a PM_EMAIL_NOTIFY_LEVEL_* constant indicating the notification
 *   level of the requested user.
 */
function _ws_pm_email_notify_user_level($uid = NULL) {
  // Either check the setting for this user or the global default.
  if ($uid) {
    $keys = array(
      'user' => array($uid),
      'global' => array(0),
    );
  } else {
    $keys = array(
      'global' => array(0),
    );
  }

  return privatemsg_get_setting('email_notify_level', $keys, PM_EMAIL_NOTIFY_LEVEL_ALL);
}

/**
 * Check if a user should only be notified when addressed directly.
 *
 * @param $uid
 *   User ID.
 *
 * @param
 *   TRUE if notifications should only be sent for directly addressed
 *   recipients.
 */
function _ws_pm_email_notify_only_user($uid) {
  // Either check the setting for this user or the global default.
  $keys = array(
    'user' => array($uid),
    'global' => array(0),
  );
  return privatemsg_get_setting('email_notify_only_user', $keys);
}

/**
 * Retrieve notification setting of a user and check if they should receive
 * an e-mail notification for a message.
 *
 * Note: This function tries to return as quickly as possible, to avoid extra
 * processing in batch executions.
 *
 * @param $uid
 *   User uid
 * @param $message
 *   Message.
 */
function _ws_pm_email_notify_send_check($uid, $message) {
  static $notifications = array();

  $mid = $message['mid'];
  $thread_id = $message['thread_id'];
  $level = _ws_pm_email_notify_user_level($uid);

  // If the user has notifications disabled, we can skip the rest.
  if ($level == PM_EMAIL_NOTIFY_LEVEL_DISABLED) {
    return FALSE;
  }

  // If the user has all notifications enabled, we can skip the rest.
  if ($level == PM_EMAIL_NOTIFY_LEVEL_ALL) {
    return TRUE;
  }

  // Cache the result set in case this method is executed in batched operation
  // which will perform many unnecessary repeated processing.
  if (!isset($notifications[$uid][$mid])) {
    // Prime the setting to false.
    $notifications[$uid][$mid] = FALSE;

    if ($level == PM_EMAIL_NOTIFY_LEVEL_THREAD) {
      // Is this the origin of a thread?
      $notifications[$uid][$mid] = ($mid == $thread_id);
    }
    elseif ($level == PM_EMAIL_NOTIFY_LEVEL_UNREAD_ONCE) {
      // If this is the first message of a thread, always send a notification.
      if ($mid == $thread_id) {
        $notifications[$uid][$mid] = TRUE;
      } else {
        // Check if this user has more than a single unread message
        // in that thread. If yes, they already got a notification.
        // They always have at least one unread message because they just
        // received one.
        $unread_count = db_result(db_query("SELECT COUNT(*) FROM {pm_index} WHERE thread_id = %d AND is_new = 1 AND recipient = %d AND type IN ('user', 'hidden')", $thread_id, $uid));
        $notifications[$uid][$mid] = $unread_count == 1;
      }
    }
  }

  return $notifications[$uid][$mid];
}

/**
 * Implements hook_privatemsg_message_insert().
 */
 function ws_pm_email_notify_privatemsg_message_insert($message) {
   foreach ($message['recipients'] as $recipient) {
    ws_pm_email_notify_send_mail($recipient, $message);
  }
}

/**
 * Implements hook_privatemsg_message_recipient_changed().
 *
 * Notifies users who were added to a message about new Private Messages
 * via Email.
 */
function ws_pm_email_notify_privatemsg_message_recipient_changed($mid, $thread_id, $recipient_id, $type, $added) {
  $types = array('user');

  // Only send mail if the recipient was added.
  if ($added) {
    if ($message = privatemsg_message_load($mid)) {
      // Check if we should send an email to 'hidden' recipients.
      if (!_ws_pm_email_notify_only_user($recipient_id)) {
        $types[] = 'hidden';
      }
      if (in_array($type, $types) && _ws_pm_email_notify_send_check($recipient_id, $message) && ($recipient = privatemsg_user_load($recipient_id))) {
        ws_pm_email_notify_send_mail($recipient, $message);
      }
    }
  }
}

/**
 * Send a pm notification email to a recipient.
 */
function ws_pm_email_notify_send_mail($recipient, $message) {
  // check if recipient enabled email notifications
  if (isset($recipient->uid) && !empty($recipient->mail) && _ws_pm_email_notify_send_check($recipient->uid, $message)) {
    // send them a new pm notification email if they did
    $params['recipient'] = $recipient;
    $params['message'] = $message;
    // The type on author determines how the author is themed.
    $params['message']['author']->type = 'user';
    $from = variable_get('ws_pm_email_notify_from', '');
    drupal_mail('ws_pm_email_notify', 'notice', $recipient->mail, user_preferred_language($recipient), $params, !empty($from) ? $from : NULL);
  }
}

/**
* Implements hook_mail().
 */
function ws_pm_email_notify_mail($key, &$message, $params) {
  $language = $message['language'];
  $variables = user_mail_tokens($params['recipient'], $language);
  $variables = array_merge($variables, _ws_pm_email_notify_token($params['recipient'], $params['message'], $language));

  switch ($key) {
    case 'notice':

      // Add a reply-to for our replymail service
      $message['headers']['Reply-To'] = ws_pm_email_notify_reply_to_address($message, $params['recipient']);
      $message['subject'] = strtr(_ws_pm_email_notify_text('subject', $language), $variables);
      $message['body'][0] = strtr(_ws_pm_email_notify_text('body', $language), $variables);
      break;
  }
}


/**
 * Return an array of token to value mappings for user e-mail messages.
 *
 * @param $message
 *   The private message array being sent.  Must contain at
 *   least the fields 'author', 'subject', 'thread_id' and 'body'.
 * @return
 *   Array of mappings from token names to values (for use with strtr()).
 */
function _ws_pm_email_notify_token($recipient, $message, $language) {
  $tokens = array(
    '!author_uid' => $message['author']->uid,
    '!author' => privatemsg_recipient_format($message['author'], array('email' => TRUE, 'plain' => TRUE)),
    '!author_link' => l($message['author']->fullname, "user/{$message['author']->uid}", array('absolute' => TRUE)),
    '!pm_subject' => trim(drupal_html_to_text(check_plain($message['subject']))),
    '!pm_body' => trim(drupal_html_to_text(check_markup($message['body'], $message['format'], FALSE))),
    '!pm_mid' => $message['mid'],
    '!pm_thread' => $message['thread_id'],
    '!pm_recipient_uid' => $recipient->uid,
    '!message' => url(privatemsg_get_dynamic_url_prefix($recipient->uid) . '/view/' . $message['thread_id'], array('absolute' => TRUE, 'language' => $language)),
    '!settings' => url('user/' . $recipient->uid . '/edit', array('absolute' => TRUE, 'language' => $language)),
    '!pm_mhash' => ws_pm_email_notify_hash_mid_tid($message['mid'], $message['thread_id']),
    '!pm_routing_hash' => ws_pm_email_notify_routing_hash($message),
  );

  // Allow other modules to alter the token mapping.
  drupal_alter('ws_pm_email_notify_token', $tokens, $recipient, $message, $language);

  return $tokens;
}

/**
 * Return a list of available tokens for user e-mail messages.
 *
 * @return
 *   A string containing all the available tokens.
 */
function _ws_pm_email_notify_token_list() {
  $tokens = drupal_map_assoc(array(
    '!author_uid',
    '!author',
    '!author_link',
    '!pm_subject',
    '!pm_body',
    '!thread',
    '!user_uid',
    '!message',
    '!pm_routing_hash',
    '!settings',
  ));

  // Customize token descriptions.
  $tokens['!message'] = '!message (URL)';
  $tokens['!settings'] = '!settings (URL)';

  // Allow other module to alter the token list.
  drupal_alter('ws_pm_email_notify_token_list', $tokens);

  return implode(', ', $tokens);
}

/**
 * Get the default text for body and subject texts.
 *
 * @param $key
 *   Defines with string to return, either subject or body.
 *
 * @return
 *   The default text for the given key.
 */
function _ws_pm_email_notify_source_text($key) {
  $text = variable_get('pm_email_notify_' . $key, FALSE);
  if (empty($text)) {
    switch ($key) {
      case 'subject':
        $text = 'New private message at !site.';
        break;
      case 'body':
        $text = "Hi !username,\n\nThis is an automatic reminder from the site !site. You have received a new private message from !author.\n\nTo read your message, follow this link:\n!message\n\nIf you don't want to receive these emails again, change your preferences here:\n!settings";
        break;
    }
  }
  return $text;
}

/**
 * Return (if possible, translated) body/subject strings.
 *
 * @param $key
 *   Defines with string to return, either subject or body.
 * @param $language
 *   Optionally define into which language should be translated. Defaults to the
 *   active language.
 * @param $translate
 *   Define if the translated text should be returned or the source. This is
 *   used in the settings page to allow editing the source but still update the
 *   translation system.
 * @return
 *   Either the translated text or the source, depending on the $translate
 *   flag.
 */
function _ws_pm_email_notify_text($key, $language = NULL, $translate = TRUE) {
  $text = _ws_pm_email_notify_source_text($key);
  // Always call tt() so that the key and source is saved and can be translated.
  // Only update the source if called from the settings page and $translate is
  // FALSE.
  $translated = ws_pm_email_notify_tt('pm_email_notify:mail:' . $key, $text, $language, !$translate);
  // Only return the translated text if requested so.
  if ($translate) {
    return $translated;
  }
  return $text;
}

/**
 * Implements hook_user().
 *
 * Display settings form and store its information.
 */
function ws_pm_email_notify_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'form':
      if ($category == 'account' && privatemsg_user_access('read privatemsg', $account)) {
        if (privatemsg_user_access('set privatemsg e-mail notification level')) {
          $form['privatemsg']['pm_email_notify_level'] = array(
            '#type' => 'radios',
            '#title' => t('Send me an e-mail notification...'),
            '#options' => array(
              PM_EMAIL_NOTIFY_LEVEL_DISABLED => t('Never.'),
              PM_EMAIL_NOTIFY_LEVEL_THREAD => t('Only for a new conversation'),
              PM_EMAIL_NOTIFY_LEVEL_UNREAD_ONCE => t("Only once for a conversation until I've read the messages"),
              PM_EMAIL_NOTIFY_LEVEL_ALL => t('Every time I receive a message'),
            ),
            '#default_value' => _ws_pm_email_notify_user_level($account->uid),
          );
        }
        else {
          // If the user does not have permissions to customize the notification
          // level, allow him to opt out of email notifications if they are not
          // disabled by default.
          $is_enabled = _ws_pm_email_notify_user_level();
          $form['privatemsg']['pm_email_notify_level'] = array(
            '#type' => 'checkbox',
            '#title' => t('Receive email notification for incoming private messages'),
            '#default_value' => $is_enabled ? PM_EMAIL_NOTIFY_LEVEL_DEFAULT : PM_EMAIL_NOTIFY_LEVEL_DISABLED,
            '#access' => $is_enabled,
          );
        }
        $form['privatemsg']['pm_email_only_user'] = array(
          '#type' => 'checkbox',
          '#title' => t("Don't send me e-mail notifications for mass messages."),
          '#default_value' => _ws_pm_email_notify_only_user($account->uid),
          '#access' => privatemsg_user_access('change privatemsg e-mail notification for indirect messages'),
        );
      }

      return $form;

    case 'submit':
      if (isset($edit['pm_email_notify_level'])) {
        privatemsg_set_setting('user', $account->uid, 'email_notify_level', $edit['pm_email_notify_level']);
        unset($edit['pm_email_notify_level']);
      }


      if (isset($edit['pm_email_only_user'])) {
        privatemsg_set_setting('user', $account->uid, 'email_notify_only_user', $edit['pm_email_only_user']);
        unset($edit['pm_email_only_user']);
      }
      break;

    case 'delete':
      privatemsg_del_setting('user', $account->uid, 'email_notify_level');
      privatemsg_del_setting('user', $account->uid, 'email_notify_only_user');
      break;
  }
}

/**
 * Implements hook_locale().
 */
function ws_pm_email_notify_locale($op = 'groups', $group = NULL) {
  switch ($op) {
    case 'groups':
      return array('pm_email_notify' => t('WS Privatemsg Email Notification'));
      break;
    case 'info':
      return array(
        'pm_email_notify' => array(
          'format' => FALSE,
          'refresh callback' => 'ws_pm_email_notify_locale_refresh',
        )
      );
  }
}

/**
 * Refresh callback to update the string translation sources.
 */
function ws_pm_email_notify_locale_refresh() {
  i18nstrings_update('pm_email_notify:mail:subject', _ws_pm_email_notify_source_text('subject'));
  i18nstrings_update('pm_email_notify:mail:body', _ws_pm_email_notify_source_text('body'));
  return TRUE;

}


/**
 * Wrapper function for tt().
 */
function ws_pm_email_notify_tt($name, $string, $language = NULL, $update = FALSE) {
  static $tt;
  if (!isset($tt)) {
    $tt = variable_get('i18n_tt', 'tt');
      if (!function_exists($tt)) {
        $tt = FALSE;
      }
  }
  if ($tt) {
    return $tt($name, $string, isset($language) ? $language->language : NULL, $update);
  }
  else {
    return $string;
  }
}


/**
 * Implements hook_mandrill_incoming_event() to handle a single inbound
 * mandrill message.
 *
 * @param $event
 * @return array|int
 */
function ws_pm_email_notify_mandrill_incoming_event($event) {
  $ts = $event->ts;
  $msg = $event->msg;

  // dd($msg->subject, 'incoming mandrill event subject');
  // dd($msg->from_email, 'incoming from_email');

  $matches = array();
  // Here we have to match in the mhash anything that can be in a base64_encode().
  if ($count = preg_match('/mid[:\|]([0-9]+)[:\|]([0-9]+)[:\|]([a-zA-Z0-9_\+\/=]+)/', $msg->subject, $matches)) {
    // dd($count, 'preg_match count');

    $mid = $matches[1];
    $sender_uid = $matches[2];
    $their_mhash = $matches[3];

    $pm = privatemsg_message_load($mid);
    if (empty($pm)) {
      watchdog('privatemsg', 'Failed to identify message id for incoming mid=%mid', array('%mid' => $mid));
      // dd($mid, 'Empty load for this mid on privatemsg_load');
      watchdog('mandrill_incoming', 'Failed to identify message ID in incoming subject (%subject)', array('%subject' => $msg->subject), WATCHDOG_ERROR);
      return array(MANDRILL_INCOMING_ERROR);
    }

    $tid = $pm['thread_id'];

    $our_mhash = ws_pm_email_notify_hash_mid_tid($mid, $tid);
    // dd($our_mhash, 'our mhash');
    // dd($their_mhash, 'their mhash');
    if ($their_mhash != $our_mhash) {
      // dd('mhashes do not match, so bailing');
      watchdog('mandrill_incoming', 'Message hash in incoming subject did not match correct (%subject)', array('%subject' => $msg->subject), WATCHDOG_ERROR);
      return array(MANDRILL_INCOMING_ERROR);
    }

    // It's good to *try* to get the account from the email here, but they could
    // very well reply from another email account. So if it fails, that should not
    // be fatal.
    $sender_account = user_load($sender_uid);

    if (!$sender_account || user_is_blocked($sender_account->name) || !privatemsg_user_access('write privatemsg', $sender_account)) {
      watchdog('mandrill_incoming', 'Sender %sender_uid does not have privilege to write privatemsg, so not sending message.', array('%sender_uid' => $sender_uid), WATCHDOG_ERROR);
      return array(MANDRILL_INCOMING_ERROR);
    }

    $thread = privatemsg_thread_load($tid, $sender_account);

    if (!array_key_exists("user_{$sender_uid}", $thread['participants'])) {
      // dd("Sender uid=$sender_uid not found in the msg recipients");
      watchdog('mandrill_incoming', 'Sender UID not found in msg recipients (%subject)', array('%subject' => $msg->subject), WATCHDOG_ERROR);

      return array(MANDRILL_INCOMING_ERROR);
    }

    $text = $msg->text;
    // We have some messages with no text part. In that case, use html part.
    // Later we'll replace this and just use the html, maybe.
    if (empty($text)) {
      $text = $msg->html;
    }

    // Replace from our message divider to the end of the message
    $text = preg_replace('/[\r\n ]*[> ]*------* .* -----*\+(.|[\r\n\t])*$/', '', $text);

    // Attempt to send a reply.
    $result = privatemsg_reply($tid, $text, array('author' => $sender_account));

    if (!$result['success']) {
      watchdog('privatemsg', 'Failed to privatemsg_reply (<pre>@result</pre>)', array('@result' => print_r($result, TRUE)), WATCHDOG_ERROR);
      return MANDRILL_INCOMING_ERROR;
    }

    // dd($result['success'], 'privatemsg_reply result');
    // dd($result['messages'], 'privatemsg_msgs');
    // dd($result['message']['body'], 'body');

    // If this sender replied by email, it's just as if they just logged in, so update account.
    user_save($sender_account, array('login' => time()));

    // Mark the thread as read for the user who sent the message
    privatemsg_thread_change_status($tid, PRIVATEMSG_READ, $sender_account);

    return MANDRILL_INCOMING_HANDLED;  // Successfully handled message
  }
  elseif (!strcasecmp($msg->subject, 'test')) {
    watchdog('mandrill_incoming', 'Received inbound test message from @email: %message', array('@email' => $msg->from, '%message' => print_r($msg, TRUE)));
    return MANDRILL_INCOMING_HANDLED;  // We can ignore test messages from new members.
  }
  // Else failed to match on the subject message id, hash, etc.
  else {
    // dd($count, 'preg_match count');
    // dd('missed the match in preg_match');
    watchdog('mandrill_incoming', 'Failed to handle incoming event - Subject did not match expected pattern (%subject)', array('%subject' => $msg->subject), WATCHDOG_ERROR);
    return array(MANDRILL_INCOMING_ERROR);
  }
}

/**
 * Hash the private msg id and thread id together to provide a way to prove
 * that the sender knew the thread id
 *
 * @param $mid
 * @param $tid
 * @return string
 */
function ws_pm_email_notify_hash_mid_tid($mid, $tid) {
  $key = variable_get('ws_pm_email_notify_hashkey', '');

  $signed_data = "$mid:$tid";
  return base64_encode(hash_hmac('sha1', $signed_data, $key, TRUE));
}


/**
 * Create a reply-to address with routing information
 *
 * @param $message
 * @param $recipient
 * @return string
 */
function ws_pm_email_notify_reply_to_address($message, $recipient) {
  $reply_to_localpart = variable_get('ws_pm_email_notify_mandrill_reply_to_localpart_base', 'messages');
  $reply_to_domain = variable_get('ws_pm_email_notify_mandrill_reply_to_domain', 'reply.warmshowers.org');
  $reply_to_friendlyname = variable_get('ws_pm_email_notify_mandrill_reply_to_friendlyname', 'Warmshowers Messages');
  $reply_to_routing = ws_pm_email_notify_routing_hash($message, $recipient);

  return "{$reply_to_friendlyname} <{$reply_to_localpart}+{$reply_to_routing}@{$reply_to_domain}>";
}

/**
 * Return routing hash which can be used on subject or reply-to
 *
 * @param $message
 * @param $recipient
 * @return string
 */
function ws_pm_email_notify_routing_hash($message, $recipient) {
  return "mid|{$message['mid']}|{$recipient->uid}|" . ws_pm_email_notify_hash_mid_tid($message['mid'], $message['thread_id']);
}
