<?php
/**
 * @file
 * Site helpers for warmshowers.org
 *
 */


/**
 * Implements hook_menu().
 *
 * @return array
 */
function warmshowers_site_menu() {
  // This page is simply to let an auth user view what the unauth user will see.
  $items['frontpage'] = array(
    'title' => 'Warm Showers',
    'page callback' => 'warmshowers_site_front_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Return empty content for our front page so it doesn't have to render real content.
 *
 * @return string
 */
function warmshowers_site_front_page() {
  return '';
}

// Alter the user-to-user contact form to (by default) copy the sender
function warmshowers_site_form_contact_mail_user_alter(&$form, $form_state) {
  $form['copy']['#default_value'] = TRUE;
}

// Alter outgoing email to add information about who it is from, etc.
//function warmshowers_site_mail_alter(&$message) {
//  if ($message['id'] == 'contact_user_mail') {
//    $recipient = $message['params']['recipient'];
//    $sender = $message['params']['user'];
//    $base_url = $GLOBALS['base_url'];
//    $langcode = $recipient->language;
//
//    // Note that here we're assuming that the body is an array, as it ought to
//    // be. However, htmlmail makes it a string, and if htmlmail processes first,
//    // this causes fatal errors. So we'll skip over this for that case.
//    if (is_array($message['body'])) {
//      foreach ($message['body'] as &$item) {
//        $item = check_markup($item, FILTER_FORMAT_DEFAULT);
//      }
//      $message['body'][] = "-----------";
//      $message['body'][] = t("This email was sent from user <a href='!sender_url'>!sender</a> to user <a href='!recipient_url'>!recipient</a>. You can just reply to it and the sender will receive your email.",
//        array('!sender' => $sender->name, '!sender_email' => $sender->mail, '!recipient' => $recipient->name, '!recipient_email' => $recipient->mail, '!sender_url' => "$base_url/user/{$sender->uid}", '!recipient_url' => "$base_url/user/{$recipient->uid}"), $langcode);
//    }
//    else {
//      $message['body'] = check_markup($message['body'], FILTER_FORMAT_DEFAULT);
//    }
//  }
//}

/**
 * Alter user profile form.
 * @param $form
 * @param $form_state
 */
function warmshowers_site_form_user_profile_form_alter(&$form, &$form_state) {
  // On submit of user form, go to view instead of staying on edit.
  if (empty($form['submit']['#submit'])) {
    // First make sure we have all the submit handlers from the form
    $form['submit']['#submit'] = $form['#submit'];
    // And now add our own, which only does the $form_state['redirect']
    $form['submit']['#submit'][] = 'warmshowers_site_user_profile_form_submit';
  }

  // Hide the comment_notify user-page settings, and make the default be
  // always send updates.
  $form['comment_notify_settings']['#access'] = FALSE;
  $form['comment_notify_settings']['node_notify_mailalert']['#type'] = 'value';
  $form['comment_notify_settings']['node_notify_mailalert']['#value'] = TRUE;

  $form['comment_notify_settings']['comment_notify_mailalert']['#type'] = 'value';
  $form['comment_notify_settings']['comment_notify_mailalert']['#value'] = TRUE;

  // Hide the option to turn off or otherwise configure privatemsg.
  $form['privatemsg']['#access'] = FALSE;
  // Hide the option to configure htmlmail
  $form['htmlmail']['#access'] = FALSE;

}

/**
 * Submit handler for form alter of user profile form.
 *
 * After saving, go to the user profile page.
 */
function warmshowers_site_user_profile_form_submit($form, &$form_state) {
  $account = $form_state['values']['_account'];
  $form_state['redirect'] =   'user/' . $account->uid;
}

/**
 * Implement hook_form_alter() to change the crazy handling in user_delete module.
 * We don't want people to have any choice but to delete it all.
 */
function warmshowers_site_form_alter(&$form, &$form_state, $form_id) {
  switch($form_id) {
    case 'user_confirm_delete':
      $form['user_delete_action'] = array(
      '#type' => 'value',
      '#value' => 'user_delete_delete',
      );
      $form['actions']['submit']['#value'] = t('Delete user account "@account"', array('@account' => $form['_account']['#value']->name));
      $form['description']['#value'] = t('The user account %account and all comments or other content associated with it will be deleted.', array('%account' => $form['_account']['#value']->name));
      break;

    // Use a translatable name for button instead of just "Delete".
    case 'user_profile_form':
      if (!empty($form['delete'])) {
        $form['delete']['#value'] = t("Delete Account");
      }
      break;

    // Get rid of the input filter stuff on comment.
    // Also change comment notification default values.
    case 'comment_form':
      $form['comment_filter']['format']['#access'] = FALSE;

      $form['notify_settings']['notify']['#default_value'] = TRUE;
      $form['notify_settings']['notify_type']['#default_value'] = 2;

      break;
  }
}


/**
 * Implements hook_block()
 *
 * @param string $op
 * @param int $delta
 * @param array $edit
 * @return array|string
 */
function warmshowers_site_block($op = 'list', $delta = 0, $edit = array()) {

  if ($op == 'list') {
    $blocks['warmshowers_site_social_links'] = array(
      'info' => t('[warmshowers_site] Social Links'),
      'cache' => BLOCK_CACHE_GLOBAL,
    );
    return $blocks;
  }
  else if ($op == 'view') {
    switch ($delta) {
      case 'warmshowers_site_social_links':
        $block['subject'] = '';
        $block['content'] = theme('warmshowers_site_social_links');
        return $block;
    }
  }
}

/**
 * Implements hook_theme()
 */
function warmshowers_site_theme() {
  $template_path = drupal_get_path('module', 'warmshowers_site') . '/templates';
  $items = array(
    'warmshowers_site_social_links' => array(
      'path' => $template_path,
      'template' => 'warmshowers_site_social_links_block',
    ),
  );
  return $items;
}


/**
 * Implements hook_menu_alter().
 *
 * Change the permissions for tracker display.
 */
function warmshowers_site_menu_alter(&$items) {
  // Change some items on user menu to no longer be MENU_LOCAL_TASK
  $removals = array('track', 'contact', 'location');
  foreach ($removals as $removal) {
    $path = "user/%user/" . $removal;
    if (!empty($items[$path])) {
      $items[$path]['type'] = MENU_NORMAL_ITEM;
    }
  }
  $items['user/%user/view']['title'] = 'Profile';

  // We don't want the node river of news page out there.
  unset($items['node']);

  // Stop using contact form for member contact, and use privatemsg
  // instead
  $items['user/%user/contact'] = array(
    'title' => 'Contact',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('warmshowers_site_contact_mail_user', 1),
    'type' => MENU_CALLBACK,
    'access callback' => '_contact_user_tab_access',
    'access arguments' => array(1),
  );
}


/**
 * Replaces the contact module's form with our own, which just submits
 * to privatemsg.
 *
 * @param $form_state
 * @param $recipient
 * @return mixed
 */
function warmshowers_site_contact_mail_user(&$form_state, $recipient) {
  global $user;
  $form['#token'] = $user->name . $user->mail;
  $form['recipient'] = array('#type' => 'value', '#value' => $recipient);
  $form['from'] = array('#type' => 'item',
    '#title' => t('From'),
    '#value' => theme('username', $user) .' &lt;'. check_plain($user->mail) .'&gt;',
  );
  $form['to'] = array('#type' => 'item',
    '#title' => t('To'),
    '#value' => theme('username', $recipient),
  );
  $form['subject'] = array('#type' => 'textfield',
    '#title' => t('Subject'),
    '#maxlength' => 50,
    '#required' => TRUE,
  );
  $form['message'] = array('#type' => 'textarea',
    '#title' => t('Message'),
    '#rows' => 15,
    '#required' => TRUE,
  );
  $form['copy'] = array(
    '#type' => 'hidden', // Hide from regular UI, but apps might still use it.
    '#title' => t('Send yourself a copy.'),
  );
  $form['submit'] = array('#type' => 'submit',
    '#value' => t('Send e-mail'),
  );
  return $form;
}

/**
 * Process the personal contact page wrapper.
 */
function warmshowers_site_contact_mail_user_submit($form, &$form_state) {
  global $user, $language;

  $account = $form_state['values']['recipient'];
  $account->type = 'user';

  $result = privatemsg_new_thread(array($account), $form_state['values']['subject'], $form_state['values']['message']);

  drupal_set_message(t('The message has been sent.'));

  // Back to the requested users profile page.
  $form_state['redirect'] = "user/$account->uid";
}
